import random
import os
import base64

from Crypto.PublicKey import RSA 
from Crypto.Signature import PKCS1_v1_5 
from Crypto.Hash import SHA256 

random.seed(os.getuid())

### UTILS
def isPrime(p):
    if(p==2): return True
    if(not(p&1)): return False
    return pow(2,p-1,p)==1


def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
        gcd = b
    return gcd, x, y


### MAIN

def getPrime(bits):
    prime = random.getrandbits(bits)
    while not isPrime(prime):
        prime = random.getrandbits(bits)
    return prime


def construct_key(p):
    q = getPrime(1024)
    n = p * q
    e = 65537

    phi = (p - 1) * (q - 1)

    # Compute modular inverse of e
    gcd, a, b = egcd(e, phi)
    d = a
    return RSA.construct((n, long(e), d, p, q))

def verify_signature(rsakey, signature, data):
    signer = PKCS1_v1_5.new(rsakey) 
    digest = SHA256.new() 

    digest.update(base64.b64decode(data))
    if signer.verify(digest, base64.b64decode(signature)):
        return True
    else:
        return False


p = getPrime(512)
indata = raw_input()
signature = raw_input()
key = construct_key(p)
if indata == 'Z2V0X2ZsYWcK' and verify_signature(key, signature, indata):
    with open('flag.txt', 'r') as f:
        print f.read()
else:
    print 'Unverified!!! Administrator has been notified!!!'